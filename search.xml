<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>第三章 基本概念</title>
      <link href="/2020/02/15/%E7%AC%AC%E4%B8%89%E7%AB%A0%20%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/"/>
      <url>/2020/02/15/%E7%AC%AC%E4%B8%89%E7%AB%A0%20%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/</url>
      
        <content type="html"><![CDATA[<h2 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h2><p>ECMAScript 标示符采用驼峰大小写格式</p><h3 id="严格模式-strict-mode"><a href="#严格模式-strict-mode" class="headerlink" title="严格模式 strict mode"></a>严格模式 strict mode</h3><p>在顶部添加代码 <code>&quot;use strict&quot;;</code><br>编译指示(pragma)，用于告诉支持的 JavaScript 引擎切换到严格模式。<br>函数体中包含指定函数在严格模式下执行。</p><h3 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h3><p>松散类型：可以用来保存任何类型的数据。每个变量仅仅用于保存值的占位符。</p><h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><p>5 基本数据类型 - <code>Undefined、Null、Boolean、Number、String</code><br>1 复杂数据类型 - <code>Object</code><br><code>Oobject</code> 本质上是由一组无序的名值对组成的<br>ECMAScript 不支持任何创建自定义类型的机制</p><p><code>typeof</code> 操作符，返回值（均为字符串）<br>未定义：<code>&quot;undefined&quot;</code><br>布尔值：<code>&quot;boolean&quot;</code><br>字符串：<code>&quot;string&quot;</code><br>数值：<code>&quot;number&quot;</code><br>对象或<code>null</code>：<code>&quot;object&quot;</code><br>函数：<code>&quot;function&quot;</code><br>特殊值 <code>null</code> 被认为是一个空的对象引用，因此返回 <code>&quot;object&quot;</code>。<br>safari 5 和 Chrome 7 及之前版本 <code>typeof 正则表达式</code> 会返回 <code>&quot;function&quot;</code>，而其他浏览器返回<code>&quot;object&quot;</code></p><blockquote><p>从技术角度讲，函数在 ECMAScript 中是对象，而不是一种数据类型。然而，函数也确实有一些特殊的属性，因此通过 <code>typeof</code> 操作符区分函数和其他对象是有必要的。</p></blockquote><h3 id="Undefined-类型"><a href="#Undefined-类型" class="headerlink" title="Undefined 类型"></a>Undefined 类型</h3><p><code>Undefined</code> 类型只有一个值，即 <code>undefined</code></p><blockquote><p>变量已声明但未初始化（message）：该变量的值为 <code>undefined</code>,<code>typeof</code> 返回<code>&quot;undefined&quot;</code><br>若变量未声明（age）：只可以执行<code>typeof</code> 操作符，返回<code>&quot;undefined&quot;</code>，其他操作产生错误。</p><p> <img src="/.com//%E5%8F%98%E9%87%8F%E5%88%9D%E5%A7%8B%E5%8C%96.png" alt="变量初始化"></p></blockquote><h3 id="Null-类型"><a href="#Null-类型" class="headerlink" title="Null 类型"></a>Null 类型</h3><p><code>Null</code> 类型只有一个值，即 <code>null</code>，表示一个空对象指针，因此 <code>typeof null</code> 返回 <code>&quot;object&quot;</code>。<br>如果定义的变量准备用于保存对象，那么最好初始化为 <code>null</code>，可以直接判断是否已经保存了一个对象的引用。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (car != <span class="literal">null</span>) &#123;</span><br><span class="line">    ……</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实际上，<code>undefined</code> 派生自 <code>null</code>，因此：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">alert(<span class="literal">null</span> == <span class="literal">undefined</span>); </span><br><span class="line"><span class="comment">// true</span></span><br></pre></td></tr></table></figure><h3 id="Boolean-类型"><a href="#Boolean-类型" class="headerlink" title="Boolean 类型"></a>Boolean 类型</h3><p>ECMAScript 中所有类型的值都有与这两个 Boolean 值等价的值。调用 <code>转型函数 Boolean()</code> 获得对应 Boolean 值。</p><table><thead><tr><th>数据类型</th><th>true</th><th>false</th></tr></thead><tbody><tr><td>Boolean</td><td>true</td><td>false</td></tr><tr><td>String</td><td>任何非空字符串</td><td>“”（空字符串）</td></tr><tr><td>Number</td><td>任何非零数字值（包括无穷大）</td><td>0 和 NaN</td></tr><tr><td>Object</td><td>任何对象</td><td>null</td></tr><tr><td>Undefined</td><td>N/A</td><td>undefined</td></tr><tr><td>N/A：not applicable 的缩写，不适用</td><td></td><td></td></tr></tbody></table><h3 id="Number-类型"><a href="#Number-类型" class="headerlink" title="Number 类型"></a>Number 类型</h3><p>使用 <a href="https://baike.baidu.com/item/IEEE%20754/3869922?fr=aladdin" target="_blank" rel="noopener">IEEE754</a> 格式来表示整数和浮点数值（双精度数值）。<br>为了支持各种数值类型，ECMA-262定义了不同的数值字面量格式。</p><ul><li>十进制</li><li>八进制（0）</li><li>十六进制（0x）<br>在进行算数计算时，都会转为十进制数值。<h5 id="浮点数值"><a href="#浮点数值" class="headerlink" title="浮点数值"></a>浮点数值</h5>浮点数值需要的内存空间是整数值的两倍。<br>6 个 0 以上，e表示法：3.125e7、3e-17<br>浮点数值最高精度 17 位小数，但在算数计算时精度远不如整数。<img src="/.com//%E7%B2%BE%E5%BA%A6.png" alt="精度"><br>（IEEE745 数值的浮点计算通病，不是 ECMAScript 独有）</li></ul><h5 id="数值范围"><a href="#数值范围" class="headerlink" title="数值范围"></a>数值范围</h5><p><code>Number.MIN_VALUE</code> 5e-324<br><code>Number.MAX_VALUE</code> 1.7976931348623157e+308<br><code>Number.POSITIVE_INFINITY</code> 或 <code>Infinity</code> 正无穷<br><code>Number.NEGATIVE_INFINITY</code> 或 <code>-Infinity</code> 负无穷<br><code>isFinite()</code>有穷返回 <code>true</code></p><h5 id="NaN"><a href="#NaN" class="headerlink" title="NaN"></a>NaN</h5><ul><li>任何涉及 NaN 的操作都会返回 NaN</li><li>NaN 与任何值都不相等，包括自己本身</li><li><code>isNaN()</code> 函数判断变量是否<strong>可以转为数值</strong></li></ul><blockquote><p>isNaN(object):<br>首先调用对象的 valueOf() 方法，检查该方法的返回值是否可以转换为数值<br>如果不能，基于这个返回值再调用 toString() 方法，再测试返回值。</p></blockquote><h5 id="数值转换"><a href="#数值转换" class="headerlink" title="数值转换"></a>数值转换</h5><p><code>Number()</code> 任何类型<br><code>parseInt()</code> 字符串<br><code>parseFloat()</code> 字符串</p><blockquote><p>parseInt 和 parseFloat 从第一个符合条件的字符开始转换，开始后若碰到不符合的字符，抛弃之后的字符。</p></blockquote><h3 id="String-类型"><a href="#String-类型" class="headerlink" title="String 类型"></a>String 类型</h3><ul><li>Unicode 字符组成的字符序列。</li><li>ECMAScript 中双引号/单引号没有区别。</li></ul><h5 id="字符字面量"><a href="#字符字面量" class="headerlink" title="字符字面量"></a>字符字面量</h5><p>字符字面量，即转义字符，被作为一个字符来解析。</p><h5 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h5><ul><li>不可改变<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> lang = <span class="string">"Java"</span>;</span><br><span class="line">lang = lang + <span class="string">"Script"</span>;</span><br><span class="line"><span class="comment">// 首先创建一个能容纳 10 个字符的新字符串，然后填充 “Java” 和 “Script”，最后销毁原来的字符串。（不在原字符串上修改）</span></span><br></pre></td></tr></table></figure></li></ul><h5 id="转为字符串"><a href="#转为字符串" class="headerlink" title="转为字符串"></a>转为字符串</h5><ul><li><p><code>toString()</code> 几乎每个值都有这个方法，<code>null</code> 和 <code>undefined</code> 值没有。</p><ul><li>通常不需要参数。</li><li>调用数值的 <code>toString()</code> 方法时可以传递进制基数作为参数。</li></ul></li><li><p>不知道是不是 <code>null</code> 或 <code>undefined</code> 的时候可以使用转型函数 <code>String()</code></p><ul><li>如果值有 <code>toString()</code> 方法，调用</li><li>如果值是 <code>null</code>，返回 <code>&quot;null&quot;</code></li><li>如果值是 <code>undefined</code>，返回 <code>&quot;undefined&quot;</code></li></ul></li><li><p><code>obj + &quot;&quot;</code> 和字符串加在一起</p></li></ul><h3 id="Object-类型"><a href="#Object-类型" class="headerlink" title="Object 类型"></a>Object 类型</h3><ul><li>对象是一组数据和功能的集合。<blockquote><p>在 ECMAScript 中，<code>Object</code> 类型所具有的任何属性和方法也同样存在于更具体的对象中。<br><code>Object</code> 的每个实例都具有下列属性和方法。</p></blockquote></li><li><code>Constructor</code> 构造函数</li><li><code>hasOwnProperty(propertyName)</code> 检查给定的属性在当前对象实例中（而不是在实例的原型中）是否存在。参数（propertyName）为字符串</li><li><code>isProtorypeOf(object)</code> 检查传入的对象是否是另一个对象的原型</li><li><code>propertyIsEnumerable(propertyName)</code> 检查给定的属性是否能够使用 for-in 语句。参数（propertyName）为字符串</li><li><code>toLocaleString()</code> 根据本地规范进行格式化</li><li><code>toString()</code> </li><li><code>valueOf()</code> 通常自动调用</li></ul><blockquote><p>从技术角度讲，ECMA-262 中对象的行为不一定适用于 JS 中的其他对象。如 BOM 和 DOM 中的对象属于宿主对象，宿主对象可能会也可能不会继承 Object。</p></blockquote><h2 id="操作符"><a href="#操作符" class="headerlink" title="操作符"></a>操作符</h2><p>操作符应用于对象时，通常会调用对象的 <code>valueOf()</code> 和（或）<code>toString()</code> 方法。</p><h2 id="语句"><a href="#语句" class="headerlink" title="语句"></a>语句</h2><h3 id="for-in"><a href="#for-in" class="headerlink" title="for-in"></a>for-in</h3><p>枚举对象的属性</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> propName <span class="keyword">in</span> <span class="built_in">window</span>) &#123;</span><br><span class="line">    <span class="built_in">document</span>.write(propName);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>属性没有顺序，所以先后顺序因浏览器而异。</p><h3 id="label"><a href="#label" class="headerlink" title="label"></a>label</h3><p>类似 go to 不建议使用</p><h3 id="with"><a href="#with" class="headerlink" title="with"></a>with</h3><p>简化多次编写同一个对象的工作<br>大量使用 with 会导致性能下降，不建议使用</p><h3 id="switch"><a href="#switch" class="headerlink" title="switch"></a>switch</h3><p>比较值时使用全等 <code>===</code></p><h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><p>未指定返回值的函数返回 <code>undefined</code></p><blockquote><p>函数要么始终返回一个值，要么永远都不要返回值。</p></blockquote><h3 id="理解参数"><a href="#理解参数" class="headerlink" title="理解参数"></a>理解参数</h3><ul><li>函数体内通过 arguments 对象来访问参数数组。</li><li>ECMAScript 中的所有参数传递的都是值，不可能通过引用传递参数。<blockquote><p>详看第四章 —— 传递参数</p></blockquote></li></ul><h3 id="没有重载"><a href="#没有重载" class="headerlink" title="没有重载"></a>没有重载</h3><p>不存在函数签名的特性，ECMAScript 函数不能重载<br>定义两个名字相同的函数，会被后面定义的函数覆盖</p>]]></content>
      
      
      
        <tags>
            
            <tag> JavaScript高级程序设计 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第二章 在 HTML 中使用 JavaScript</title>
      <link href="/2020/02/09/%E7%AC%AC%E4%BA%8C%E7%AB%A0%20%E5%9C%A8%20HTML%20%E4%B8%AD%E4%BD%BF%E7%94%A8%20JavaScript/"/>
      <url>/2020/02/09/%E7%AC%AC%E4%BA%8C%E7%AB%A0%20%E5%9C%A8%20HTML%20%E4%B8%AD%E4%BD%BF%E7%94%A8%20JavaScript/</url>
      
        <content type="html"><![CDATA[<h2 id="lt-script-gt-元素"><a href="#lt-script-gt-元素" class="headerlink" title="&lt;script&gt;元素"></a><code>&lt;script&gt;</code>元素</h2><h5 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h5><ul><li><p>src 可选。包含要执行代码的外部文件。</p><blockquote><p>如果有 src，标签内嵌入的 JavaScript 代码会被忽略<br>可以包含来自外部域的 JavaScript 文件。这点与 <code>&lt;img&gt;</code> 相同</p></blockquote></li><li><p>async 可选。立即下载脚本，但不妨碍页面中其他操作。只对外部脚本文件有效。<strong>不能保证按顺序执行。不要修改 DOM 会在load 事件前执行，可能会在 <code>DOMContentLoaded</code> 事件触发之前或之后执行。</strong></p></li><li><p>defer 可选。延迟到文档完全被解析和显示之后（<code>&lt;/html&gt;</code>标签后）执行。<strong>只对外部脚本文件有效。</strong>（嵌入脚本的 defer 属性会被忽略）<strong>延迟脚本不一定会按照顺序执行，也不一定会在 <code>DOMContentLoaded</code> 事件触发前执行，因此最好只有一个延迟脚本。</strong></p><blockquote><p>只要不存在 defer 和 async 属性，浏览器都会按照 <code>&lt;scrip&gt;</code> 元素在页面中出现的先后顺序进行解析</p></blockquote></li></ul><ul><li>type 可选。language（已废弃）的替代属性；脚本语言的内容类型（MIME 类型）。默认值 text/javascript<blockquote><p>不推荐 text/javascript 和 text/ecmascript<br>服务器在传送 JavaScript 文件时使用的 MIME 类型通常是 application/x-javascript<br>非 IE 浏览器中可以使用 application/javascript 和 application/ecmascript</p></blockquote></li><li>charset 可选。表示通过 src 属性指定代码的字符集。大多数浏览器忽略</li></ul><h3 id="标签的位置"><a href="#标签的位置" class="headerlink" title="标签的位置"></a>标签的位置</h3><p>放在 <code>head</code> 中必须先把 js 代码下载、解析和执行完成后才能开始呈现页面内容，此时页面空白。<br>把 js 引用放在 <code>body</code> 中，空白时间会缩短。<br>或者设置 defer 属性，立即下载，延迟（<code>&lt;/html&gt;</code>标签后）执行。</p><h2 id="外部文件的优点"><a href="#外部文件的优点" class="headerlink" title="外部文件的优点"></a>外部文件的优点</h2><ul><li>可维护性：集中精力编辑 js 代码</li><li>可缓存：如果两个页面使用同一个文件，只需下载一次</li><li>适应未来</li></ul><h2 id="文档模式"><a href="#文档模式" class="headerlink" title="文档模式"></a>文档模式</h2><p><code>&lt;!DOCTYPE html&gt;</code></p><h2 id="lt-noscript-gt-元素"><a href="#lt-noscript-gt-元素" class="headerlink" title="&lt;noscript&gt;元素"></a><code>&lt;noscript&gt;</code>元素</h2><ul><li>浏览器不支持脚本</li><li>浏览器支持脚本，但脚本被禁用<br>符合上述条件，元素内容会被显示。</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> JavaScript高级程序设计 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第一章 JavaScript 简介</title>
      <link href="/2020/01/16/%E7%AC%AC%E4%B8%80%E7%AB%A0%20JavaScript%20%E7%AE%80%E4%BB%8B/"/>
      <url>/2020/01/16/%E7%AC%AC%E4%B8%80%E7%AB%A0%20JavaScript%20%E7%AE%80%E4%BB%8B/</url>
      
        <content type="html"><![CDATA[<p>ECMA-262——定义一种名为 ECMAScript 的新脚本语言的标准<br>浏览器开发商将 ECMAScript 作为各自 JavaScript 实现的基础</p><blockquote><p>JavaScript 包括：</p><ul><li>核心： ECMAScript</li><li>文档对象模型： DOM</li><li>浏览器对象模型： BOM</li></ul></blockquote><h3 id="ECMAScript"><a href="#ECMAScript" class="headerlink" title="ECMAScript"></a>ECMAScript</h3><ul><li>没有输入和输出定义</li><li>ECMA-262 定义了 ECMAScript 基础，在此基础上可以构建更完善的脚本语言</li><li>宿主环境提供基本的 ECMAScript 实现，也提供该语言的拓展，以便语言和环境之间对接交互</li></ul><p>ECMA-262 标准规定了</p><ul><li>语法</li><li>类型</li><li>语句</li><li>关键字</li><li>保留字</li><li>操作符</li><li>对象<br>ECMAScript 就是对实现该标准规定的各个方面内容的语言的描述<br>JavaScript 实现了 ECMAScript<br>Adobe ActionScript 也实现了 ECMAScript<h6 id="什么是-ECMAScript-兼容"><a href="#什么是-ECMAScript-兼容" class="headerlink" title="什么是 ECMAScript 兼容"></a>什么是 ECMAScript 兼容</h6><blockquote><p>要想成为 ECMAScript 的实现，必须做到：</p><ul><li>支持 ECMA-262 描述的所有“类型、值、对象、属性、函数以及程序语法和语义”</li><li>支持 Unicode 字符标准</li><li>可以进行拓展：<ul><li>添加 ECMA-262 没有描述的“更多类型、值、对象、属性和函数”。主要指新对象和对象的新属性</li><li>支持 ECMA-262 没有定义的“程序和正则表达式语法”。即可以修改和拓展内置的正则表达式语法</li></ul></li></ul><p>为开发人员基于 ECMAScript 开发一门新语言提供了广阔的空间和极大的灵活性</p></blockquote></li></ul><h3 id="DOM"><a href="#DOM" class="headerlink" title="DOM"></a>DOM</h3><p>DOM（Document Object Model）是针对 XML 但经过拓展用于 HTML 的 API（Application Programming Interface）</p><ul><li>W3C 制定了 DOM 标准</li><li>DOM 不止针对 JavaScript，很多别的语言也实现了 DOM</li><li>DOM 包括 DOM 核心和 DOM HTML<ul><li>DOM 核心规定如何映射基于 XML 的文档结构</li><li>DOM HTML 模块则在 DOM 核心 的基础上添加了针对 HTML 的对象和方法</li></ul></li></ul><p>除了 DOM 核心和 DOMHTML 接口之外，另外几种语言发布了只针对自己的 DOM 标准。以下语言都是基于 XML 的，每种语言的 DOM 标准都添加了与特定语言相关的新方法和新接口：</p><ul><li>SVG(Scalable Vector Graphic)</li><li>MathML（Mathematical Markup Language）</li><li>SMIL（Synchronized Multimedia Integration Language）<h3 id="BOM"><a href="#BOM" class="headerlink" title="BOM"></a>BOM</h3>开发人员使用 BOM（Browser Object Model）控制浏览器显示的页面以外的部分<br>BOM 作为 JavaScript 实现的一部分却没有相关的标准。H5 致力于把很多 BOM 功能写入正式规范。<br>根本上讲，BOM 只处理浏览器窗口和框架；但习惯上把所有针对浏览器的 JavaScript 扩展算作 BOM 的一部分。</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> JavaScript高级程序设计 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
